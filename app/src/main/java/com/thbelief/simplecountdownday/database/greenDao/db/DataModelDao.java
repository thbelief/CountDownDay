package com.thbelief.simplecountdownday.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thbelief.simplecountdownday.model.DataModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_MODEL".
*/
public class DataModelDao extends AbstractDao<DataModel, Long> {

    public static final String TABLENAME = "DATA_MODEL";

    /**
     * Properties of entity DataModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Unit = new Property(3, int.class, "unit", false, "UNIT");
        public final static Property IsClock = new Property(4, boolean.class, "isClock", false, "IS_CLOCK");
        public final static Property ColorId = new Property(5, int.class, "colorId", false, "COLOR_ID");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property IsDisplay = new Property(7, boolean.class, "isDisplay", false, "IS_DISPLAY");
    }


    public DataModelDao(DaoConfig config) {
        super(config);
    }
    
    public DataModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DATE\" TEXT," + // 2: date
                "\"UNIT\" INTEGER NOT NULL ," + // 3: unit
                "\"IS_CLOCK\" INTEGER NOT NULL ," + // 4: isClock
                "\"COLOR_ID\" INTEGER NOT NULL ," + // 5: colorId
                "\"CONTENT\" TEXT," + // 6: content
                "\"IS_DISPLAY\" INTEGER NOT NULL );"); // 7: isDisplay
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getUnit());
        stmt.bindLong(5, entity.getIsClock() ? 1L: 0L);
        stmt.bindLong(6, entity.getColorId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
        stmt.bindLong(8, entity.getIsDisplay() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getUnit());
        stmt.bindLong(5, entity.getIsClock() ? 1L: 0L);
        stmt.bindLong(6, entity.getColorId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
        stmt.bindLong(8, entity.getIsDisplay() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataModel readEntity(Cursor cursor, int offset) {
        DataModel entity = new DataModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.getInt(offset + 3), // unit
            cursor.getShort(offset + 4) != 0, // isClock
            cursor.getInt(offset + 5), // colorId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.getShort(offset + 7) != 0 // isDisplay
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnit(cursor.getInt(offset + 3));
        entity.setIsClock(cursor.getShort(offset + 4) != 0);
        entity.setColorId(cursor.getInt(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsDisplay(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
